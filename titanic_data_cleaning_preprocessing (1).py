{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b4a728c2-0871-40fe-9d61-dcfa2f077a6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   PassengerId  Survived  Pclass  \\\n",
      "0            1         0       3   \n",
      "1            2         1       1   \n",
      "2            3         1       3   \n",
      "3            4         1       1   \n",
      "4            5         0       3   \n",
      "\n",
      "                                                Name     Sex   Age  SibSp  \\\n",
      "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
      "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
      "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
      "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
      "4                           Allen, Mr. William Henry    male  35.0      0   \n",
      "\n",
      "   Parch            Ticket     Fare Cabin Embarked  \n",
      "0      0         A/5 21171   7.2500   NaN        S  \n",
      "1      0          PC 17599  71.2833   C85        C  \n",
      "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
      "3      0            113803  53.1000  C123        S  \n",
      "4      0            373450   8.0500   NaN        S  \n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n",
      "None\n",
      "\n",
      "Missing Values:\n",
      " PassengerId      0\n",
      "Survived         0\n",
      "Pclass           0\n",
      "Name             0\n",
      "Sex              0\n",
      "Age            177\n",
      "SibSp            0\n",
      "Parch            0\n",
      "Ticket           0\n",
      "Fare             0\n",
      "Cabin          687\n",
      "Embarked         2\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cleaned Dataset Shape: (577, 1726)\n",
      "   PassengerId  Survived    Pclass       Age     SibSp     Parch      Fare  \\\n",
      "0    -1.730108 -0.789272  0.827377 -0.592481  0.432793 -0.473674 -0.502445   \n",
      "2    -1.722332  1.266990  0.827377 -0.284663 -0.474545 -0.473674 -0.488854   \n",
      "3    -1.718444  1.266990 -1.566107  0.407926  0.432793 -0.473674  0.420730   \n",
      "4    -1.714556 -0.789272  0.827377  0.407926 -0.474545 -0.473674 -0.486337   \n",
      "5    -1.710669 -0.789272  0.827377  0.000000 -0.474545 -0.473674 -0.478116   \n",
      "\n",
      "   Name_Abbott, Mr. Rossmore Edward  Name_Abbott, Mrs. Stanton (Rosa Hunt)  \\\n",
      "0                             False                                  False   \n",
      "2                             False                                  False   \n",
      "3                             False                                  False   \n",
      "4                             False                                  False   \n",
      "5                             False                                  False   \n",
      "\n",
      "   Name_Abelson, Mr. Samuel  ...  Cabin_F G63  Cabin_F G73  Cabin_F2  \\\n",
      "0                     False  ...        False        False     False   \n",
      "2                     False  ...        False        False     False   \n",
      "3                     False  ...        False        False     False   \n",
      "4                     False  ...        False        False     False   \n",
      "5                     False  ...        False        False     False   \n",
      "\n",
      "   Cabin_F33  Cabin_F38  Cabin_F4  Cabin_G6  Cabin_T  Embarked_Q  Embarked_S  \n",
      "0      False      False     False     False    False       False        True  \n",
      "2      False      False     False     False    False       False        True  \n",
      "3      False      False     False     False    False       False        True  \n",
      "4      False      False     False     False    False       False        True  \n",
      "5      False      False     False     False    False        True       False  \n",
      "\n",
      "[5 rows x 1726 columns]\n",
      "     PassengerId  Survived    Pclass       Age     SibSp     Parch      Fare  \\\n",
      "884     1.706781 -0.789272  0.827377 -0.361618 -0.474545 -0.473674 -0.506472   \n",
      "886     1.714556 -0.789272 -0.369365 -0.207709 -0.474545 -0.473674 -0.386671   \n",
      "887     1.718444  1.266990 -1.566107 -0.823344 -0.474545 -0.473674 -0.044381   \n",
      "889     1.726220  1.266990 -1.566107 -0.284663 -0.474545 -0.473674 -0.044381   \n",
      "890     1.730108 -0.789272  0.827377  0.177063 -0.474545 -0.473674 -0.492378   \n",
      "\n",
      "     Name_Abbott, Mr. Rossmore Edward  Name_Abbott, Mrs. Stanton (Rosa Hunt)  \\\n",
      "884                             False                                  False   \n",
      "886                             False                                  False   \n",
      "887                             False                                  False   \n",
      "889                             False                                  False   \n",
      "890                             False                                  False   \n",
      "\n",
      "     Name_Abelson, Mr. Samuel  ...  Cabin_F G63  Cabin_F G73  Cabin_F2  \\\n",
      "884                     False  ...        False        False     False   \n",
      "886                     False  ...        False        False     False   \n",
      "887                     False  ...        False        False     False   \n",
      "889                     False  ...        False        False     False   \n",
      "890                     False  ...        False        False     False   \n",
      "\n",
      "     Cabin_F33  Cabin_F38  Cabin_F4  Cabin_G6  Cabin_T  Embarked_Q  Embarked_S  \n",
      "884      False      False     False     False    False       False        True  \n",
      "886      False      False     False     False    False       False        True  \n",
      "887      False      False     False     False    False       False        True  \n",
      "889      False      False     False     False    False       False       False  \n",
      "890      False      False     False     False    False        True       False  \n",
      "\n",
      "[5 rows x 1726 columns]\n"
     ]
    }
   ],
   "source": [
    "# Import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Step 1: Import dataset and explore\n",
    "df = pd.read_csv(\"C:/Users/kurup/Downloads/archive (1)/Titanic-Dataset.csv\") \n",
    "print(df.head())\n",
    "print(df.info())\n",
    "print(\"\\nMissing Values:\\n\", df.isnull().sum())\n",
    "\n",
    "# Step 2: Handle missing values\n",
    "# Fill numerical columns with mean\n",
    "df.fillna(df.mean(numeric_only=True), inplace=True)\n",
    "\n",
    "# Fill categorical columns with mode - avoid inplace chained assignment warning by assigning back\n",
    "for col in df.select_dtypes(include='object'):\n",
    "    df[col] = df[col].fillna(df[col].mode()[0])\n",
    "\n",
    "# Step 3: Encode categorical features using one-hot encoding\n",
    "df = pd.get_dummies(df, drop_first=True)\n",
    "\n",
    "# Step 4: Normalize/Standardize numerical features\n",
    "scaler = StandardScaler()\n",
    "numeric_cols = df.select_dtypes(include=np.number).columns\n",
    "df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n",
    "\n",
    "# Step 5: Visualize outliers using boxplots\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.boxplot(data=df[numeric_cols])\n",
    "plt.title(\"Boxplot to detect outliers\")\n",
    "plt.xticks(rotation=90)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Optional: Remove outliers using IQR method\n",
    "Q1 = df[numeric_cols].quantile(0.25)\n",
    "Q3 = df[numeric_cols].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "df_cleaned = df[~((df[numeric_cols] < (Q1 - 1.5 * IQR)) | (df[numeric_cols] > (Q3 + 1.5 * IQR))).any(axis=1)]\n",
    "\n",
    "# Final check\n",
    "print(\"\\nCleaned Dataset Shape:\", df_cleaned.shape)\n",
    "print(df_cleaned.head())\n",
    "print(df_cleaned.tail())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8bfcdd4-c8ad-4269-99ab-74063bb9c81c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
